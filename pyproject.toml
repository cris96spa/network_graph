[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "mlflow-template"
version = "0.0.3"
authors = [ {name="MLcube"}]
description = "MLflow Template"
license = "Proprietary"
readme = "README.md"
classifiers = [ "Private :: Do not Upload",]
requires-python = ">=3.12.2"

# list of project dependencies
dependencies = [
    # because pyyaml 6.0.0 is broken with Cython3
    "pyyaml==5.3.1",
]

[tool.setuptools]
packages = ["ml3_flow"]
# optional grouped dependencies that are installed only when explicitly set
[project.optional-dependencies]
# dev dependencies are installed during development but no for package
dev = [
    "mypy",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-asyncio",
    "pytest-xdist[psutil]",
    "ruff",
    "ipykernel",
    "numpy>=1.24.4",
    "scipy>=1.10.1",
    "pandas>=2.0.1",
    "polars>=1.6.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.2",
    "pyarrow>=12.0.1",
    "fsspec>=2023.6.0",
    "matplotlib>=3.7.2",
    "mlflow>=2.11.0",
    "seaborn>=0.12.2",
    "xgboost>=1.7.6",
    "scikit-learn>=1.3.0",
    "optuna==3.5.0",
]
# dependencies needed to build package
build = ["twine", "build"]

[tool.ruff]

line-length = 79
indent-width = 4
target-version = "py38"
exclude = [
    "tests"
]

[tool.ruff.lint]
fixable = ["ALL"]
select = [
    "F",
    "W",
    "E",
    "I",
    "N", # names,
    #"D", # docstrings
    "UP",
    "ANN", # annotations
    "ASYNC",
    #"S",  # security
    #"BLE" # blind exception
    #"FBT", # boolean trap
    "B",
    "A",
    "COM",
    # "CPY", # copyright
    #"C4", # comprehension
    #"DTZ", # datetime
    "T10",
    #"DJ", # django
    #"EM", # error message
    #"EXE", # executable
    #"FA", # future annotations
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    #"RET", # return
    "SLF",
    "SLOT",
    "SIM", # simplify
    "TID",
    "TCH",
    "INT",
    "ARG",
    #"PTH", # pathlib
    #"TD, # todos
    #"FIX", # fixmes
    "ERA",
    #"PD", # pandas
    #"PGH", # pygrep hooks
    "PL",
    #"TRY", # excception handling,
    #"FLY", # f-strings
    "NPY",
    #"AIR", # airflow
    #"PERF", # performance
    #"FURB", # refurb
    "LOG",
    #"RUF", # ruff specific
]
ignore = [
    "B008",
    "PLR0913",
    "PLR0912",
    "PLR2004",
    "EM102",
    "E501",
    "G004",
    "RSE102",
    "COM812",
    "ISC001",
    "Q000",
    "Q003",
    "PLR0915",
    "PLR0911",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"